// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum SearchContentType {
  WEB
  IMAGES
  VIDEOS
  NEWS
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  password          String
  name              String?
  role              UserRole @default(USER)
  isEmailVerified   Boolean  @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  tokens        Token[]
  searchHistory SearchHistory[]
  
  @@map("users")
}

enum TokenType {
  ACCESS
  REFRESH
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  type      TokenType
  expires   DateTime
  blacklisted Boolean @default(false)
  userId    Int
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model SearchHistory {
  id           String            @id @default(uuid())
  query        String
  userId       Int
  resultCount  Int               @default(0)
  searchedAt   DateTime          @default(now())
  
  // Search filters
  dateRangeFrom DateTime?
  dateRangeTo   DateTime?
  domain        String?
  contentType   SearchContentType @default(WEB)
  sortBy        String            @default("relevance")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

model SearchCache {
  id          String    @id @default(uuid())
  queryHash   String    @unique
  query       String
  filters     Json?
  results     Json
  totalCount  Int
  searchTime  Int
  cachedAt    DateTime  @default(now())
  expiresAt   DateTime
  hitCount    Int       @default(0)
  lastHitAt   DateTime?

  @@map("search_cache")
}

model SystemSettings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value Json
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}